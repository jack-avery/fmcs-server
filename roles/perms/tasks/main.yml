---
- name: Load secrets
  include_tasks: secrets.yml

- name: Generate perms
  include_tasks: gen_perms.yml
  loop: "{{ instances }}"
  loop_control:
    loop_var: instance

- name: Enable whitelist if whitelist is created
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.1.rcon_pass }}"
    command: "whitelist on"
  loop: "{{ instances|zip(instances_secrets) }}"
  loop_control:
    index_var: loop0
  timeout: 10
  delegate_to: localhost
  when: '"whitelist" in item.0'

- name: Tell servers to reload whitelist
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.1.rcon_pass }}"
    command: "whitelist reload"
  loop: "{{ instances|zip(instances_secrets) }}"
  loop_control:
    index_var: loop0
  timeout: 10
  delegate_to: localhost
  when: '"whitelist" in item.0'

- name: Disable whitelist if whitelist is removed
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.1.rcon_pass }}"
    command: "whitelist off"
  loop: "{{ instances|zip(instances_secrets) }}"
  loop_control:
    index_var: loop0
  timeout: 10
  delegate_to: localhost
  when: 'not "whitelist" in item.0'

- name: Inform whitelist update
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "say Permissions updated."
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  timeout: 10
  delegate_to: localhost
