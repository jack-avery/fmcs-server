---
- name: Load secrets
  ansible.builtin.include_tasks: secrets.yml

- name: Find expired backups
  ansible.builtin.find:
    paths: "{{ role_path }}/files/{{ inventory_hostname }}"
    age: "{{ delete_backups_after_days }}d"
    recurse: yes
  register: old_backups
  delegate_to: localhost

- name: Delete expired backups
  ansible.builtin.file:
    path: "{{ item.path }}" 
    state: absent
  with_items: "{{ old_backups.files }}"
  delegate_to: localhost

- name: Inform backup (might lag)
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "say Backup triggered, server might lag."
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost

- name: (Attempt to?) save current world state
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "save-all"
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost

- name: Create root backup directory
  ansible.builtin.file:
    path: ~/backups
    state: directory
    mode: 0755

- name: Create remote backup directories
  ansible.builtin.file:
    path: ~/backups/{{ item.name }}
    state: directory
    mode: 0755
  loop: "{{ instances }}"

- name: Create local backup directories
  ansible.builtin.file:
    path: "{{ role_path }}/files/{{ inventory_hostname }}"
    state: directory
    mode: 0755
  delegate_to: localhost

- name: Get date for file
  shell: date +%d-%m-%y_%H-%M
  register: date

- name: Create backups
  ansible.builtin.archive:
    path: ~/worlds/{{ item.name }}
    dest: ~/backups/{{ item.name }}/{{ date.stdout_lines.0 }}.tar.gz
  loop: "{{ instances }}"

- name: Copy backups to local
  ansible.posix.synchronize:
    mode: pull
    src: ~/backups/
    dest: "{{ role_path }}/files/{{ inventory_hostname }}"

- name: Delete backups on remote for space
  ansible.builtin.file:
    state: absent
    path: ~/backups/{{ item.name }}
  loop: "{{ instances }}"

- name: Inform backup complete
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "say Backup completed."
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost
