---
- name: Load secrets
  ansible.builtin.include_tasks: secrets.yml

- name: Warn update
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "say Update triggered, restart soon..."
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost

- name: Delete old build data
  ansible.builtin.file:
    state: absent
    path: ~/build/{{ item.name }}
  loop: "{{ instances }}"

- name: Create build directory
  ansible.builtin.file:
    path: ~/build/{{ item.name }}
    state: directory
    mode: 0755
  loop: "{{ instances }}"

##
# Set up mod-related

- name: Get latest Fabric installer
  ansible.builtin.uri:
    url: https://meta.fabricmc.net/v2/versions/installer
    method: GET
  register: fabric_api_installers

- name: Set Fabric installer version
  set_fact:
    fabric_installer_version: "{{ fabric_api_installers.json[0].version }}"

# - name: Copy files
#   ansible.posix.synchronize:
#     src: "{{ role_path }}/files/"
#     dest: ~/build/{{ item.name }}
#     recursive: true
#   loop: "{{ instances }}"

##
# Basic config

- name: Accept EULA
  shell: echo eula=true > ~/build/{{ item.name }}/eula.txt
  loop: "{{ instances }}"

- name: /server.properties
  ansible.builtin.template:
    src: server.properties.j2
    dest: ~/build/{{ item.0.name }}/server.properties
    mode: 0755
  loop: "{{ instances|zip(instances_secrets) }}"
  loop_control:
    index_var: loop0

- name: /server-icon.png
  ignore_errors: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ inventory_hostname }}/icons/{{ item.name }}.png"
    dest: ~/build/{{ item.name }}/server-icon.png
    mode: 0755
  loop: "{{ instances }}"

- name: /Dockerfile
  ansible.builtin.template:
    src: Dockerfile.j2
    dest: ~/build/{{ item.name }}/Dockerfile
    mode: 0755
  loop: "{{ instances }}"

- name: /run.sh
  ansible.builtin.template:
    src: run.sh.j2
    dest: ~/build/{{ item.name }}/run.sh
    mode: 0755
  loop: "{{ instances }}"

- name: Generate perms
  include_tasks: gen_perms.yml
  loop: "{{ instances }}"
  loop_control:
    loop_var: instance

##
# Mod stuff

- name: Get Modrinth mods
  ansible.builtin.include_tasks: modrinth.yml
  loop: "{{ instances }}"
  loop_control:
    loop_var: instance
    index_var: loop0

- name: /config/voicechat
  file:
    path: ~/build/{{ item.name }}/config/voicechat/
    state: directory
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
  when: '"simple-voice-chat" in item.mods'

- name: /config/voicechat/voicechat-server.properties
  ansible.builtin.template:
    src: mods/voicechat-server.properties.j2
    dest: ~/build/{{ item.name }}/config/voicechat/voicechat-server.properties
    mode: 0755
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
  when: '"simple-voice-chat" in item.mods'

- name: /dynmap
  file:
    path: ~/build/{{ item.name }}/dynmap/
    state: directory
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
  when: '"dynmap" in item.mods'

- name: /dynmap/configuration.txt
  ansible.builtin.template:
    src: mods/dynmap.txt.j2
    dest: ~/build/{{ item.name }}/dynmap/configuration.txt
    mode: 0755
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
  when: '"dynmap" in item.mods'

  # TODO: figure out some way to easily reformat yml to this toml format
- name: /config/localizedchat.toml
  ansible.builtin.template:
    src: mods/localizedchat.toml.j2
    dest: ~/build/{{ item.name }}/config/localizedchat.toml
    mode: 0755
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
  when: '"localized-chat" in item.mods'

##
# Build and run

- name: Prune space before building
  community.docker.docker_prune:
    images: true
    containers: true

- name: Build images
  community.docker.docker_image:
    name: "mcs-{{ item.name }}"
    tag: "latest"
    source: build
    build:
      path: ~/build/{{ item.name }}
      pull: true
    state: present
    force_source: true
    force_tag: true
  loop: "{{ instances }}"

- name: Announce update now!!
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "say Server is restarting for updates."
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost

- name: (Attempt to?) save current world state
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
    password: "{{ item.rcon_pass }}"
    command: "save-all"
  loop: "{{ instances_secrets }}"
  loop_control:
    index_var: loop0
  delegate_to: localhost

- name: Create network for relay
  community.docker.docker_network:
    name: "network-mcs-{{ item.name }}"
  loop: "{{ instances }}"

- name: Start
  community.docker.docker_container:
    name: "mcs-{{ item.name }}"
    image: "mcs-{{ item.name }}:latest"
    state: started
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: "network-mcs-{{ item.name }}"
    volumes:
      - "~/worlds/{{ item.name }}:/server/world"
      - "~/logs/{{ item.name }}:/server/logs"
    ports:
      - "{{ mcs_base_port + (loop0 * mcs_reserve_ports) }}:{{ mcs_base_port + (loop0 * mcs_reserve_ports) }}"
      - "{{ mcs_base_port + (loop0 * mcs_reserve_ports) }}:{{ mcs_base_port + (loop0 * mcs_reserve_ports) }}/udp"
      - "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}:{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 1 }}"
      - "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 2 }}:{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 2 }}/udp"
      - "{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 3 }}:{{ mcs_base_port + (loop0 * mcs_reserve_ports) + 3 }}/tcp"
  loop: "{{ instances }}"
  loop_control:
    index_var: loop0
