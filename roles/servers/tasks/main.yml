---
- name: Setup
  ansible.builtin.include_tasks: setup.yml

- name: Announce update now!!
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ item.port }}"
    password: "{{ item.secrets.rcon_pass }}"
    command: "say Server is shutting down for updates."
  loop: "{{ targets.instances }}"
  timeout: 5
  delegate_to: localhost

- name: (Attempt to?) save current world state
  ignore_errors: true
  rcon:
    address: "{{ ansible_host }}"
    port: "{{ item.port }}"
    password: "{{ item.secrets.rcon_pass }}"
    command: "save-all"
  loop: "{{ targets.instances }}"
  timeout: 5
  delegate_to: localhost

- name: Shut down server for maintenance
  ignore_errors: true
  systemd_service:
    scope: user
    name: mcs-{{ item.name }}
    state: stopped
  loop: "{{ targets.instances }}"

##
# Set up mod-related

- name: Get latest Fabric installer
  ansible.builtin.uri:
    url: https://meta.fabricmc.net/v2/versions/installer
    method: GET
  register: fabric_api_installers

- name: Set Fabric installer version
  set_fact:
    fabric_installer_version: "{{ fabric_api_installers.json[0].version }}"

##
# Basic config

- name: Create server folder
  ansible.builtin.file:
    path: ~/{{ item.name }}
    state: directory
    mode: 0755
  loop: "{{ targets.instances }}"

- name: Download server .jar
  get_url:
    url: "https://meta.fabricmc.net/v2/versions/loader/{{ item.minecraft_ver }}/{{ item.fabric }}/{{ fabric_installer_version }}/server/jar"
    dest: ~/{{ item.name }}/server.jar
    mode: 0700
  loop: "{{ targets.instances }}"

- name: Accept EULA
  shell: echo eula=true > ~/{{ item.name }}/eula.txt
  loop: "{{ targets.instances }}"

- name: /server.properties
  ansible.builtin.template:
    src: server.properties.j2
    dest: ~/{{ item.name }}/server.properties
    mode: 0755
  loop: "{{ targets.instances }}"

- name: /server-icon.png
  ignore_errors: true
  ansible.builtin.copy:
    src: "{{ role_path }}/files/{{ inventory_hostname }}/icons/{{ item.name }}.png"
    dest: ~/{{ item.name }}/server-icon.png
    mode: 0755
  loop: "{{ targets.instances }}"

- name: Generate perms
  include_tasks: gen_perms.yml
  loop: "{{ targets.instances }}"
  loop_control:
    loop_var: instance

##
# Mod stuff

- name: Get Modrinth mods
  ansible.builtin.include_tasks: modrinth.yml
  loop: "{{ targets.instances }}"
  loop_control:
    loop_var: instance

- name: /config/voicechat
  file:
    path: ~/{{ item.name }}/config/voicechat/
    state: directory
  loop: "{{ targets.instances }}"
  when: '"simple-voice-chat" in item.mods'

- name: /config/voicechat/voicechat-server.properties
  ansible.builtin.template:
    src: mods/voicechat-server.properties.j2
    dest: ~/{{ item.name }}/config/voicechat/voicechat-server.properties
    mode: 0755
  loop: "{{ targets.instances }}"
  when: '"simple-voice-chat" in item.mods'

- name: /dynmap
  file:
    path: ~/{{ item.name }}/dynmap/
    state: directory
  loop: "{{ targets.instances }}"
  when: '"dynmap" in item.mods'

- name: /dynmap/configuration.txt
  ansible.builtin.template:
    src: mods/dynmap.txt.j2
    dest: ~/{{ item.name }}/dynmap/configuration.txt
    mode: 0755
  loop: "{{ targets.instances }}"
  when: '"dynmap" in item.mods'

  # TODO: figure out some way to easily reformat yml to this toml format
- name: /config/localizedchat.toml
  ansible.builtin.template:
    src: mods/localizedchat.toml.j2
    dest: ~/{{ item.name }}/config/localizedchat.toml
    mode: 0755
  loop: "{{ targets.instances }}"
  when: '"localized-chat" in item.mods'

##
# Build and run

- name: Make .config/systemd/user folder
  ansible.builtin.file:
    path: ~/.config/systemd/user
    state: directory
    mode: 0700

- name: Template systemd service
  ansible.builtin.template:
    src: service.j2
    dest: ~/.config/systemd/user/mcs-{{ item.name }}.service
    mode: 0755
  loop: "{{ targets.instances }}"

- name: Template systemd restart service
  ansible.builtin.template:
    src: restart_service.j2
    dest: ~/.config/systemd/user/mcs-{{ item.name }}-restart.service
    mode: 0755
  loop: "{{ targets.instances }}"

- name: Template systemd restart timer
  ansible.builtin.template:
    src: restart_timer.j2
    dest: ~/.config/systemd/user/mcs-{{ item.name }}-restart.timer
    mode: 0755
  loop: "{{ targets.instances }}"

- name: Start server
  systemd_service:
    scope: user
    daemon_reload: true
    name: mcs-{{ item.name }}
    enabled: true
    state: started
  loop: "{{ targets.instances }}"

- name: Enable restart timer
  systemd_service:
    scope: user
    name: mcs-{{ item.name }}-restart.timer
    enabled: true
    state: started
  loop: "{{ targets.instances }}"
